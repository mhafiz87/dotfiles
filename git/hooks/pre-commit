#!/bin/bash

# https://stackoverflow.com/questions/24998434/read-command-display-the-prompt-in-color-or-enable-interpretation-of-backslas
# https://www.ditig.com/256-colors-cheat-sheet

RESET="\e[0m"
BOLD="\e[1m"
ITALIC="\e[3m"

FTBLACKDARK="\e[90m"
FTRED="\e[31m"
FTYELLOW="\e[33m"
FTBLUE="\e[34m"

FGREEN="\e[38;2;0;255;0m"
FORANGE="\e[38;2;255;165;0m"

CLEARLINE="\e[2K"
RESETCURSOR="\e[0G" # or "\r"

# Function to justify string by append dot until column 78
# Arguments:
#   $1: string to justify
#   $2: string to append and column 79
justify() {
    max_length=78
    temp=$(echo -e "$1" | sed 's/\x1b\[[0-9;]*m//g') # remove color codes
    clean_length=${#temp}
    remaining_length=$((max_length - clean_length))
    printf "%b" "${1}"
    eval printf "%.0s." {1..${remaining_length}}
    printf "%s" "${2}"
    printf "${RESET}\n"
}

# https://gist.github.com/SamEureka/3e61942d37256550b40d0ffe75bc22c4
six_dot_cell_pattern=("⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇")
eight_dot_cell_pattern=("⣾" "⢿" "⡿" "⣷" "⣯" "⢟" "⡻" "⣽")
braille_spinner=("${eight_dot_cell_pattern[@]}")
frame_duration=0.1

# Function to start the spinner in the background
# Arguments:
#   $1: message to display
start_spinner() {
    tput civis
    (
        spinner_index=0
        while :; do
            printf "\r%s " "${braille_spinner[spinner_index]}"
            spinner_index=$(((spinner_index + 1) % ${#braille_spinner[@]}))
            sleep "$frame_duration"
        done
    ) &
    spinner_pid=$!
    echo -en "  $1"
    disown
}

# Function to stop the spinner in the background
# Arguments:
#   $1: message to display
stop_spinner() {
    kill -9 "$spinner_pid"
    tput cnorm
    echo -en "${CLEARLINE}\r"
    if [[ -n "$1" ]]; then
        justify "$@"
    else
        echo -en "${RESET}"
    fi
}

# Python
# Git pre-commit hook using Ruff to sort imports, check, and fix issues

global_hook() {
    # Store list of staged Python files
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$')

    if [[ "$STAGED_FILES" = "" ]]; then
        echo -e "${ITALIC}${FTBLACKDARK}No Python files staged for commit. Skipping Ruff checks.${RESET}"
        exit 0
    fi

    start_spinner "Running Ruff on staged Python files..."
    stop_spinner

    # First, sort imports
    start_spinner "Sorting imports with Ruff..."
    output=$(ruff check --select I --fix $STAGED_FILES)
    stop_spinner "${BOLD}${FGREEN}⣿${RESET} Sorting imports with Ruff" "✅"

    # Then run Ruff to check and fix other issues
    start_spinner "Running Ruff checks and fixes..."
    output=$(ruff check --fix $STAGED_FILES)
    if [[ $? != 0 ]]; then
        stop_spinner "${FTRED}⣿ Ruff checks and fixes: Ruff error found" "❌"
        # ruff check --fix $STAGED_FILES
        # echo -e "${output}"
    else
        stop_spinner "${BOLD}${FGREEN}⣿${RESET} Ruff checks and fixes: ${output}" "✅"
    fi

    # Check docstrings
    # Q002: bad-quotes-docstring
    # D102: undocumented-public-method
    # D103: undocumented-public-function
    # D105: undocumented-magic-method
    # D414: empty-docstring-section
    # D419: empty-docstring
    start_spinner "Running Ruff checks for dosctring..."
    # output=$(script -q /dev/null -c "ruff check --select Q002,D102,D103,D105,D414,D419 --fix $STAGED_FILES" | cat)
    output=$(ruff check --select Q002,D102,D103,D105,D414,D419 --fix $STAGED_FILES)
    if [[ $? != 0 ]]; then
        stop_spinner "${FTYELLOW}⣿ Ruff error in dosctring, does not affect commit" "❌"
        # echo -e "${output}"
        # ruff check --select Q002,D102,D103,D105,D414,D419 --fix $STAGED_FILES
    else
        stop_spinner "${BOLD}${FGREEN}⣿${RESET} Ruff checks for dosctring: ${output}" "✅"
    fi

    # Check if any files were modified by Ruff
    if git diff --name-only | grep -E '\.py$' >/dev/null; then
        echo -e "${ITALIC}${FTBLUE}Ruff made changes. Adding modified files to staging area.${RESET}"
        git add $STAGED_FILES
    fi

    # # if type -P basedpyright $>/dev/null; then
    # start_spinner "Running basedpyright..."
    # output=$(basedpyright --level error $STAGED_FILES)
    # basedpyright_status=$?
    # if [[ $basedpyright_status != 0 ]]; then
    #     stop_spinner "${FTRED}⣿ Basedpyright found issues. Please fix and commit again" "❌"
    #     root=$(git rev-parse --show-toplevel)
    #     if [[ $OSTYPE == "msys" ]]; then
    #         root=$(echo -e "${root}" | sed 's|\/|\\|g')
    #         root="${root,}"
    #     fi
    #     res=$(echo -e "${output}" | grep --color=always -E "^  .+error.+")
    #     echo -e "${RESET}${FORANGE}${res}${RESET}"
    #     echo ""
    #     exit 1
    # fi
    # # else
    # #     echo -e "${ITALIC}${FTBLACKDARK}basedpyright does not exist... ${RESET}"
    # # fi

    # Run a final check to ensure all issues are fixed or properly ignored
    start_spinner "Running final verification..."
    output=$(ruff check --extend-select F $STAGED_FILES)
    if [[ $? != 0 ]]; then
        stop_spinner "${FTRED}⣿ Ruff found issues that couldn't be auto fixed. Please fix and commit again" "❌"
        echo ""
        exit 1
    fi

    stop_spinner "${BOLD}${FGREEN}⣿${RESET} Ruff checks passed" "✅"
    echo ""

    exit 0
}

# Check if local pre-commit hook exists

GLOBAL_HOOK="${BASH_SOURCE[0]}"
LOCAL_HOOK="$(git rev-parse --show-toplevel)"'/.git/hooks/pre-commit'

if [[ ! -f "$LOCAL_HOOK" ]]; then
    echo -e "${ITALIC}${FTBLACKDARK}pre-commit local hook NOT available. using global hook...${RESET}"
    global_hook "$@"
else
    echo -e "${ITALIC}${FTBLACKDARK}pre-commit local hook is available. using local hook...${RESET}"
    exec "$LOCAL_HOOK" "$@"
fi
